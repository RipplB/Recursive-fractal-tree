/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void optionsDraw(PApplet appc, GWinData data) { //_CODE_:options:991499:
  appc.background(230);
} //_CODE_:options:991499:

public void angleChange(GSlider source, GEvent event) { //_CODE_:angleSlider:912974:
  setAngle(angleSlider.getValueF());
} //_CODE_:angleSlider:912974:

public void lengthChange(GSlider source, GEvent event) { //_CODE_:lengthSlider:619981:
  setLength(lengthSlider.getValueF());
} //_CODE_:lengthSlider:619981:

public void densityChange(GSlider source, GEvent event) { //_CODE_:densitySlider:701217:
  setRo(densitySlider.getValueF());
} //_CODE_:densitySlider:701217:

public void mindrawChange(GSlider source, GEvent event) { //_CODE_:mindrawSlider:576525:
  setMinimum((short)mindrawSlider.getValueI());
} //_CODE_:mindrawSlider:576525:

public void thicknessChange(GSlider source, GEvent event) { //_CODE_:thicknessSlider:510117:
  setThickness((short)abs(thicknessSlider.getValueI()-17));
} //_CODE_:thicknessSlider:510117:

public void bgRedSliderChange(GSlider source, GEvent event) { //_CODE_:bgRedSlider:497844:
  bgR = (short)bgRedSlider.getValueI();
} //_CODE_:bgRedSlider:497844:

public void bgGreenSliderChange(GSlider source, GEvent event) { //_CODE_:bgGreenSlider:317483:
  bgG = (short)bgGreenSlider.getValueI();
} //_CODE_:bgGreenSlider:317483:

public void bgBlueSliderChange(GSlider source, GEvent event) { //_CODE_:bgBlueSlider:888156:
  bgB = (short)bgBlueSlider.getValueI();
} //_CODE_:bgBlueSlider:888156:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(true);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("Sketch Window");
  options = GWindow.getWindow(this, "Options", 10, 10, 400, 350, JAVA2D);
  options.noLoop();
  options.setActionOnClose(G4P.EXIT_APP);
  options.addDrawHandler(this, "optionsDraw");
  angleLabel = new GLabel(options, 0, 0, 100, 50);
  angleLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  angleLabel.setText("Angle");
  angleLabel.setTextBold();
  angleLabel.setLocalColorScheme(GCScheme.RED_SCHEME);
  angleLabel.setOpaque(true);
  angleSlider = new GSlider(options, 100, 0, 300, 50, 10.0);
  angleSlider.setShowValue(true);
  angleSlider.setLimits(0.3, 0.0, 1.0);
  angleSlider.setNumberFormat(G4P.DECIMAL, 2);
  angleSlider.setOpaque(true);
  angleSlider.addEventHandler(this, "angleChange");
  lengthLabel = new GLabel(options, 0, 50, 100, 50);
  lengthLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lengthLabel.setText("Branchlength");
  lengthLabel.setTextBold();
  lengthLabel.setLocalColorScheme(GCScheme.RED_SCHEME);
  lengthLabel.setOpaque(true);
  lengthSlider = new GSlider(options, 100, 50, 300, 50, 10.0);
  lengthSlider.setShowValue(true);
  lengthSlider.setLimits(300.0, 50.0, 400.0);
  lengthSlider.setNumberFormat(G4P.DECIMAL, 2);
  lengthSlider.setOpaque(true);
  lengthSlider.addEventHandler(this, "lengthChange");
  densityLabel = new GLabel(options, 0, 100, 100, 50);
  densityLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  densityLabel.setText("Density");
  densityLabel.setTextBold();
  densityLabel.setLocalColorScheme(GCScheme.RED_SCHEME);
  densityLabel.setOpaque(true);
  densitySlider = new GSlider(options, 100, 100, 300, 50, 10.0);
  densitySlider.setShowValue(true);
  densitySlider.setLimits(0.7, 0.6, 0.8);
  densitySlider.setNumberFormat(G4P.DECIMAL, 2);
  densitySlider.setOpaque(true);
  densitySlider.addEventHandler(this, "densityChange");
  mindrawLabel = new GLabel(options, 0, 150, 100, 50);
  mindrawLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  mindrawLabel.setText("Min length");
  mindrawLabel.setTextBold();
  mindrawLabel.setLocalColorScheme(GCScheme.RED_SCHEME);
  mindrawLabel.setOpaque(true);
  mindrawSlider = new GSlider(options, 100, 150, 300, 50, 10.0);
  mindrawSlider.setShowValue(true);
  mindrawSlider.setShowLimits(true);
  mindrawSlider.setLimits(20, 5, 30);
  mindrawSlider.setNbrTicks(25);
  mindrawSlider.setStickToTicks(true);
  mindrawSlider.setShowTicks(true);
  mindrawSlider.setNumberFormat(G4P.INTEGER, 0);
  mindrawSlider.setOpaque(true);
  mindrawSlider.addEventHandler(this, "mindrawChange");
  thicknessLabel = new GLabel(options, 0, 200, 100, 50);
  thicknessLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  thicknessLabel.setText("Thickness");
  thicknessLabel.setTextBold();
  thicknessLabel.setLocalColorScheme(GCScheme.RED_SCHEME);
  thicknessLabel.setOpaque(true);
  thicknessSlider = new GSlider(options, 100, 200, 300, 50, 10.0);
  thicknessSlider.setShowValue(true);
  thicknessSlider.setShowLimits(true);
  thicknessSlider.setLimits(10, 2, 15);
  thicknessSlider.setNbrTicks(14);
  thicknessSlider.setStickToTicks(true);
  thicknessSlider.setShowTicks(true);
  thicknessSlider.setNumberFormat(G4P.INTEGER, 0);
  thicknessSlider.setOpaque(true);
  thicknessSlider.addEventHandler(this, "thicknessChange");
  bgLabel = new GLabel(options, 0, 250, 100, 50);
  bgLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  bgLabel.setText("Background");
  bgLabel.setTextBold();
  bgLabel.setLocalColorScheme(GCScheme.RED_SCHEME);
  bgLabel.setOpaque(true);
  bgRedSlider = new GSlider(options, 100, 250, 100, 50, 10.0);
  bgRedSlider.setShowValue(true);
  bgRedSlider.setShowLimits(true);
  bgRedSlider.setLimits(80, 0, 255);
  bgRedSlider.setNumberFormat(G4P.INTEGER, 0);
  bgRedSlider.setLocalColorScheme(GCScheme.RED_SCHEME);
  bgRedSlider.setOpaque(true);
  bgRedSlider.addEventHandler(this, "bgRedSliderChange");
  bgGreenSlider = new GSlider(options, 200, 250, 100, 50, 10.0);
  bgGreenSlider.setShowValue(true);
  bgGreenSlider.setShowLimits(true);
  bgGreenSlider.setLimits(80, 0, 255);
  bgGreenSlider.setNumberFormat(G4P.INTEGER, 0);
  bgGreenSlider.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  bgGreenSlider.setOpaque(true);
  bgGreenSlider.addEventHandler(this, "bgGreenSliderChange");
  bgBlueSlider = new GSlider(options, 300, 250, 100, 50, 10.0);
  bgBlueSlider.setShowValue(true);
  bgBlueSlider.setShowLimits(true);
  bgBlueSlider.setLimits(80, 0, 255);
  bgBlueSlider.setNumberFormat(G4P.INTEGER, 0);
  bgBlueSlider.setOpaque(true);
  bgBlueSlider.addEventHandler(this, "bgBlueSliderChange");
  options.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow options;
GLabel angleLabel; 
GSlider angleSlider; 
GLabel lengthLabel; 
GSlider lengthSlider; 
GLabel densityLabel; 
GSlider densitySlider; 
GLabel mindrawLabel; 
GSlider mindrawSlider; 
GLabel thicknessLabel; 
GSlider thicknessSlider; 
GLabel bgLabel; 
GSlider bgRedSlider; 
GSlider bgGreenSlider; 
GSlider bgBlueSlider; 
